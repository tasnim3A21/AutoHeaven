{% extends 'base_admin.html.twig' %}

{% block content %}
<style>
/* styles/notifications.css */

.container {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
}

h2 {
    color: #2c3e50;
    margin-bottom: 1.5rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #ecf0f1;
}

/* Style de base pour toutes les notifications */
.notification {
    background: white;
    border-left: 4px solid #e74c3c;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
    position: relative;
}

/* Style pour les notifications non lues */
.notification.unread {
    border-left-color: #e74c3c;
    background-color: #fff6f6;
}

/* Style pour les notifications lues */
.notification.read {
    border-left-color: #95a5a6;
    opacity: 0.8;
}

.notification small {
    color: #7f8c8d;
    font-size: 0.8rem;
    margin-top: 0.5rem;
    align-self: flex-end;
}

/* Bouton "Marquer comme lu" */
.mark-as-read {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 0.3rem 0.8rem;
    border-radius: 3px;
    cursor: pointer;
    font-size: 0.8rem;
    margin-top: 0.5rem;
    align-self: flex-end;
    transition: background-color 0.2s;
}

.mark-as-read:hover {
    background-color: #2980b9;
}

/* Animation pour les nouvelles notifications */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

#realtime-notifications .notification {
    animation: fadeIn 0.5s ease-out;
}

/* Indicateur visuel pour les nouvelles notifications */
.notification.unread::after {
    content: '';
    position: absolute;
    top: 10px;
    right: 10px;
    width: 8px;
    height: 8px;
    background-color: #e74c3c;
    border-radius: 50%;
}

/* Responsive design */
@media (max-width: 768px) {
    .container {
        padding: 0 0.5rem;
    }
    
    .notification {
        padding: 0.8rem;
    }
}
</style>
    <div class="container">
        <h2>Historique des alertes</h2>
        
        {# Notifications existantes #}
        <div id="stored-notifications">
            {% for notification in notifications %}
                <div class="notification {% if notification.isRead %}read{% endif %}" 
                     data-id="{{ notification.id }}">
                    {{ notification.message }}
                    <small>{{ notification.createdAt|date('d/m/Y H:i') }}</small>
                    <button class="mark-as-read">Marquer comme lu</button>
                </div>
            {% endfor %}
        </div>
        
        {# Nouvelles notifications en temps r√©el #}
        <div id="realtime-notifications"></div>
    </div>



    <script>
        // Gestion des nouvelles notifications
        channel.bind('stock-depleted', function(data) {
            const container = document.getElementById('realtime-notifications');
            container.innerHTML += `
                <div class="notification unread" data-id="${data.id}">
                    ${data.message}
                    <button class="mark-as-read">Marquer comme lu</button>
                </div>
            `;
        });

        // Marquer comme lu
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('mark-as-read')) {
                const notificationDiv = e.target.closest('.notification');
                const notificationId = notificationDiv.dataset.id;
                
                fetch(`/notifications/${notificationId}/read`, {
                    method: 'POST'
                }).then(() => {
                    notificationDiv.classList.remove('unread');
                    notificationDiv.classList.add('read');
                });
            }
        });
    </script>
{% endblock %}
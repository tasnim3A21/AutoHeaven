{% extends 'base_admin.html.twig' %}

{% block title %}Réservations Mécanicien{% endblock %}

{% block content %}
<div class="container">
    <h1>Réservations Mécaniciens</h1>

    {# Search Bar #}
    <div class="mb-3">
        <input type="text" id="searchInput" class="form-control" placeholder="Rechercher...">
    </div>

    <table class="table" id="reservationTable">
        <thead>
            <tr>
                <th class="sortable" data-sort="id">ID</th>
                <th class="sortable" data-sort="user">Nom utilisateur</th>
                <th class="sortable" data-sort="mec">Nom mécanicien</th>
                <th class="sortable" data-sort="adresse">Adresse</th>
                <th class="sortable" data-sort="note">Note</th>
                <th class="sortable" data-sort="date">Date</th>
                <th class="sortable" data-sort="status">Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for reservation in reservations %}
            <tr>
                <td>{{ reservation.getId_res_m() }}</td>
                <td>{{ reservation.client.nom }} {{ reservation.client.prenom }} ({{ reservation.client.id }})</td>
                <td>{{ reservation.mecanicien.nom }} {{ reservation.mecanicien.prenom }} ({{ reservation.mecanicien.id }})</td>
                <td>{{ reservation.adresse }}</td>
                <td>{{ reservation.note }}</td>
                <td>{{ reservation.date|date('Y-m-d') }}</td>
                <td>{{ reservation.status }}</td>
                <td>
                    {% if reservation.status == 'en_cours_de_traitement' %}
                        <a href="{{ path('app_rdv_mecanicien_confirm', {'id': reservation.getId_res_m()}) }}" class="btn btn-sm btn-success">Confirmée</a>
                        <a href="{{ path('app_rdv_mecanicien_reject', {'id': reservation.getId_res_m()}) }}" class="btn btn-sm btn-warning">Rejetée</a>
                    {% else %}
                        <a href="{{ path('app_rdv_mecanicien_edit', {'id': reservation.getId_res_m()}) }}" class="btn btn-sm btn-primary">Modifier</a>
                        <a href="{{ path('app_rdv_mecanicien_delete', {'id': reservation.getId_res_m()}) }}" class="btn btn-sm btn-danger">Supprimer</a>
                    {% endif %}
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const table = document.getElementById('reservationTable');
    const rows = table.getElementsByTagName('tr');
    const sortableHeaders = document.querySelectorAll('.sortable');

    // Search functionality
    searchInput.addEventListener('keyup', function() {
        const searchTerm = searchInput.value.toLowerCase();
        
        for(let i = 1; i < rows.length; i++) {
            let found = false;
            const cells = rows[i].getElementsByTagName('td');
            
            for(let j = 0; j < cells.length - 1; j++) {
                const cellText = cells[j].textContent.toLowerCase();
                if(cellText.includes(searchTerm)) {
                    found = true;
                    break;
                }
            }
            
            rows[i].style.display = found ? '' : 'none';
        }
    });

    // Sorting functionality
    let sortDirection = 1;

    sortableHeaders.forEach(header => {
        header.addEventListener('click', function() {
            const column = this.dataset.sort;
            const columnIndex = Array.from(this.parentElement.children).indexOf(this);
            
            const rowsArray = Array.from(table.getElementsByTagName('tr')).slice(1);
            
            rowsArray.sort((a, b) => {
                let aValue = a.getElementsByTagName('td')[columnIndex].textContent;
                let bValue = b.getElementsByTagName('td')[columnIndex].textContent;
                
                if (column === 'date') {
                    aValue = new Date(aValue);
                    bValue = new Date(bValue);
                    return sortDirection * (aValue - bValue);
                } else if (column === 'id' || column === 'user' || column === 'mec') {
                    return sortDirection * (parseInt(aValue) - parseInt(bValue));
                } else {
                    return sortDirection * aValue.localeCompare(bValue, 'fr');
                }
            });
            
            sortDirection *= -1;
            
            const tbody = table.getElementsByTagName('tbody')[0];
            tbody.innerHTML = '';
            rowsArray.forEach(row => tbody.appendChild(row));
        });
    });
});
</script>
{% endblock %}

<style>
.sortable {
    cursor: pointer;
    user-select: none;
}
.sortable:hover {
    background-color: #f8f9fa;
}
</style>

{% endblock %}
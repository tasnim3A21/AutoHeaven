{% extends 'base.html.twig' %}

{% block title %}Reclamation{% endblock %}

{% block content %}
    <div class="reclamation-container">
        <h1>Passer une réclamation</h1>

        <!-- History Button -->
        <div class="button-container history-button-container">
            <button class="btn-history" id="showHistoryBtn">Voir l'historique des réclamations</button>
        </div>

        {{ form_start(reclamationForm, {'attr': {'id': 'reclamationForm', 'novalidate': 'novalidate'}}) }}
            <div class="form-group">
                {{ form_label(reclamationForm.titre, 'Objet', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(reclamationForm.titre, {'attr': {'class': 'form-input', 'required': 'required'}}) }}
                {{ form_errors(reclamationForm.titre) }}
            </div>

            <div class="form-group">
                <label for="category" class="form-label">Catégorie</label>
                <select id="category" name="category" class="form-input" required>
                    <option value="">Sélectionnez une catégorie</option>
                    <option value="livraison">Problème de livraison</option>
                    <option value="produit">Produit défectueux</option>
                    <option value="service">Service client</option>
                    <option value="autre">Autre</option>
                </select>
            </div>

            <div class="form-group">
                <div class="label-with-icon">
                    {{ form_label(reclamationForm.contenu, 'Votre réclamation', {'label_attr': {'class': 'form-label'}}) }}
                    <span id="voiceInputBtn" class="voice-input-label">
                        <img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">
                    </span>
                </div>
                <div class="label-with-icon">
                    {{ form_label(reclamationForm.contenu, 'Votre réclamation', {'label_attr': {'class': 'form-label'}}) }}
                    <span id="voiceInputBtn" class="voice-input-label">
                        <img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">
                    </span>
                </div>
                <div class="textarea-container">
                    {{ form_widget(reclamationForm.contenu, {'attr': {'class': 'form-textarea', 'required': 'required', 'aria-describedby': 'word-counter message-error'}}) }}
                    <label for="form_imageFile" class="image-upload-label">
                        <img src="{{ asset('images/img.png') }}" alt="Joindre une image" class="image-upload-icon">
                    </label>
                    {{ form_widget(reclamationForm.imageFile, {'attr': {'id': 'form_imageFile'}}) }}
                </div>
                {{ form_errors(reclamationForm.contenu) }}
                {{ form_errors(reclamationForm.imageFile) }}
                <span id="imageFileName" class="image-file-name"></span>
                <div class="word-counter" id="word-counter">
                    <span id="word-count">0</span>/100 mots
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill"></div>
                    </div>
                </div>
                <div class="action-buttons">
                    <button type="button" id="correctTextBtn" class="btn-correct-text">Corriger la réclamation</button>
                </div>
            </div>

            <div class="form-group">
                {{ form_label(reclamationForm.urgent, 'Réclamation urgente', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(reclamationForm.urgent, {'attr': {'class': 'form-checkbox'}}) }}
                {{ form_errors(reclamationForm.urgent) }}
            </div>

            <div class="button-container">
                <button type="submit" class="btn-submit">Envoyer</button>
            </div>

            <div class="progress-container" id="progressContainer" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFillSubmission"></div>
                </div>
            </div>
        {{ form_end(reclamationForm) }}

        <div id="successMessage" class="success-message" style="display: none;">
            Réclamation envoyée avec succès !
        </div>
        <div id="errorMessage" class="error-message" style="display: none;">
            Une erreur est survenue.
        </div>

        <!-- Modal for Recent Reclamations -->
        <div id="reclamationsModal" class="modal">
            <div class="modal-content">
                <span class="close">×</span>
                <h2>Réclamations Récentes</h2>
                <div class="table-wrapper">
                    <table class="reclamation-table">
                        <thead>
                            <tr>
                                <th>Objet</th>
                                <th>Contenu</th>
                                <th>Statut</th>
                                <th>Date</th>
                                <th>Urgent</th>
                                <th>Image</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="modalReclamationsBody">
                            <!-- Populated dynamically via JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Modal for Editing Reclamation -->
        <div id="editReclamationModal" class="modal">
            <div class="modal-content">
                <span class="close edit-close">×</span>
                <h2>Modifier la réclamation</h2>
                <form id="editReclamationForm" novalidate="novalidate">
                    <input type="hidden" id="editReclamationId" name="id_rec">
                    <div class="form-group">
                        <label for="editTitre" class="form-label">Objet</label>
                        <input type="text" id="editTitre" name="titre" class="form-input" required>
                        <div id="editTitreError" class="form-error" style="display: none;"></div>
                    </div>
                    <div class="form-group">
                        <label for="editCategory" class="form-label">Catégorie</label>
                        <select id="editCategory" name="category" class="form-input" required>
                            <option value="">Sélectionnez une catégorie</option>
                            <option value="livraison">Problème de livraison</option>
                            <option value="produit">Produit défectueux</option>
                            <option value="service">Service client</option>
                            <option value="autre">Autre</option>
                        </select>
                        <div id="editCategoryError" class="form-error" style="display: none;"></div>
                    </div>
                    <div class="form-group">
                        <div class="label-with-icon">
                            <label for="editContenu" class="form-label">Votre réclamation</label>
                            <span id="editVoiceInputBtn" class="voice-input-label">
                                <img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">
                            </span>
                        </div>
                        <textarea id="editContenu" name="contenu" class="form-textarea" required aria-describedby="edit-word-counter"></textarea>
                        <div id="editContenuError" class="form-error" style="display: none;"></div>
                        <div class="word-counter" id="edit-word-counter">
                            <span id="edit-word-count">0</span>/100 mots
                            <div class="progress-bar">
                                <div class="progress-fill" id="edit-progress-fill"></div>
                            </div>
                        </div>
                        <div class="action-buttons">
                            <button type="button" id="editCorrectTextBtn" class="btn-correct-text">Corriger la réclamation</button>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="editUrgent" class="form-label">Réclamation urgente</label>
                        <input type="checkbox" id="editUrgent" name="urgent" class="form-checkbox">
                    </div>
                    <div class="button-container">
                        <button type="submit" class="btn-submit">Enregistrer</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <style>
        :root {
            --primary-color: #dc3545;
            --primary-hover: #c82333;
            --text-color: #2d2d2d;
            --text-secondary: #4a4a4a;
            --background-light: #f8f9fa;
            --background-lighter: #ffffff;
            --border-color: #d5d5d5;
            --shadow-color: rgba(0, 0, 0, 0.08);
            --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            --table-bg-odd: #f7e6e6; /* Light red for odd rows */
            --table-bg-even: #f0f8ff; /* Light blue for even rows */
        }

        .reclamation-container {
            max-width: 700px;
            margin: 40px auto;
            padding: 30px;
            background: linear-gradient(145deg, var(--background-lighter), #f5f6f8);
            border-radius: 12px;
            box-shadow: 0 6px 15px var(--shadow-color);
            font-family: var(--font-family);
            border: 1px solid var(--border-color);
            border-left: 6px solid var(--primary-color);
            position: relative;
            overflow: hidden;
        }

        .reclamation-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary-color), transparent);
        }

        h1, h2 {
            font-family: var(--font-family);
            color: var(--text-color);
            margin: 0 auto 35px;
            font-size: 30px;
            font-weight: 700;
            text-align: center;
            letter-spacing: 1.2px;
            padding-bottom: 12px;
            border-bottom: 3px solid var(--primary-color);
            width: fit-content;
            position: relative;
        }

        h2 {
            font-size: 24px;
            margin-top: 40px;
        }

        h1::after, h2::after {
            content: '';
            position: absolute;
            bottom: -3px;
            left: 50%;
            transform: translateX(-50%);
            width: 60%;
            height: 3px;
            background: linear-gradient(to right, transparent, var(--primary-hover), transparent);
        }

        .form-group {
            margin-bottom: 30px;
            text-align: left;
        }

        .form-label {
            display: block;
            margin-bottom: 12px;
            font-family: var(--font-family);
            font-weight: 700;
            color: var(--text-color);
            font-size: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            line-height: 1;
        }

        .label-with-icon {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-input,
        .form-textarea,
        select.form-input,
        .form-checkbox {
            width: 100%;
            padding: 14px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 15px;
            font-family: var(--font-family);
            background: linear-gradient(to right, var(--background-lighter), #f9f9f9);
            box-shadow: inset 0 2px 5px var(--shadow-color);
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            line-height: 1.6;
        }

        .form-checkbox {
            width: auto;
            padding: 0;
            margin-right: 10px;
        }

        .form-textarea {
            resize: vertical;
            min-height: 120px;
            padding-right: 50px;
        }

        .form-input:focus,
        .form-textarea:focus,
        select.form-input:focus,
        .form-checkbox:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.25), inset 0 2px 5px var(--shadow-color);
            outline: none;
        }

        .form-input.error,
        .form-textarea.error {
            border-color: var(--primary-color);
            background: #fff5f5;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.25), inset 0 2px 5px var(--shadow-color);
        }

        .textarea-container {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .image-upload-label {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        .image-upload-label:hover {
            transform: translateY(-50%) scale(1.1);
            opacity: 0.8;
        }

        .image-upload-label:focus {
            outline: none;
            transform: translateY(-50%) scale(1.1);
            opacity: 0.8;
        }

        .image-upload-icon {
            width: 36px;
            height: 36px;
            vertical-align: middle;
            filter: brightness(0.9);
            transition: filter 0.3s ease;
        }

        .image-upload-label:hover .image-upload-icon {
            filter: brightness(1.1);
        }

        input[type="file"] {
            display: none;
        }

        .voice-input-label {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.3s ease, opacity 0.3s ease;
            margin: 0;
            padding: 0;
        }

        .voice-input-label:hover {
            transform: scale(1.1);
            opacity: 0.8;
        }

        .voice-input-label:focus {
            outline: none;
            transform: scale(1.1);
            opacity: 0.8;
        }

        .voice-input-icon {
            width: 24px;
            height: 24px;
            vertical-align: middle;
            filter: brightness(0.9);
            transition: filter 0.3s ease;
        }

        .voice-input-label:hover .voice-input-icon {
            filter: brightness(1.1);
        }

        .image-file-name {
            display: block;
            margin-top: 8px;
            font-size: 14px;
            color: var(--text-secondary);
            font-family: var(--font-family);
            font-style: italic;
        }

        .word-counter {
            font-size: 14px;
            color: var(--text-secondary);
            margin-top: 8px;
            margin-bottom: 15px;
            font-family: var(--font-family);
            display: flex;
            align-items: center;
            gap: 10px;
            transition: color 0.3s ease;
        }

        .word-counter.warning {
            color: var(--primary-color);
        }

        .progress-bar {
            width: 100px;
            height: 5px;
            background: var(--border-color);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            width: 0;
            height: 100%;
            background: linear-gradient(to right, var(--primary-color), var(--primary-hover));
            transition: width 0.3s ease;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn-correct-text {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: #ffffff;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-family: var(--font-family);
            font-weight: 600;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 3px 8px var(--shadow-color);
            letter-spacing: 0.5px;
        }

        .btn-correct-text:hover {
            background: linear-gradient(135deg, #5a6268, #4b5156);
            transform: translateY(-1px);
            box-shadow: 0 5px 12px rgba(108, 117, 125, 0.3);
        }

        .btn-correct-text:focus {
            outline: none;
            box-shadow: 0 0 8px rgba(108, 117, 125, 0.5);
        }

        .btn-correct-text:disabled {
            background: linear-gradient(135deg, #cccccc, #b0b0b0);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .progress-container {
            margin-top: 10px;
            width: 100%;
        }

        .progress-bar {
            width: 100%;
            height: 5px;
            background: var(--border-color);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            width: 0;
            height: 100%;
            background: linear-gradient(to right, var(--primary-color), var(--primary-hover));
            transition: width 0.3s ease;
        }

        .form-errors {
            color: var(--primary-color) !important;
            font-size: 14px;
            margin-top: 8px;
            font-family: var(--font-family);
            font-weight: 500;
            background: #fff5f5;
            padding: 8px 12px;
            border-radius: 6px;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 2px 5px var(--shadow-color);
        }

        .form-error {
            color: var(--primary-color) !important;
            font-size: 14px;
            margin-top: 8px;
            font-family: var(--font-family);
            font-weight: 500;
            background: #fff5f5;
            padding: 8px 12px;
            border-radius: 6px;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 2px 5px var(--shadow-color);
        }

        .button-container {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .history-button-container {
            margin-bottom: 30px;
        }

        .btn-submit,
        .btn-history,
        .btn-edit {
            background: linear-gradient(135deg, var(--primary-color), #e4606d);
            color: #ffffff;
            padding: 12px 35px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            font-family: var(--font-family);
            font-weight: 600;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 10px var(--shadow-color);
            letter-spacing: 0.8px;
            text-decoration: none;
            display: inline-block;
        }

        .btn-edit {
            padding: 8px 20px;
            font-size: 14px;
        }

        .btn-submit:hover,
        .btn-history:hover,
        .btn-edit:hover {
            background: linear-gradient(135deg, var(--primary-hover), #d44d5a);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(220, 53, 69, 0.3);
        }

        .btn-submit:focus,
        .btn-history:focus,
        .btn-edit:focus {
            outline: none;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
        }

        .btn-submit:disabled {
            background: linear-gradient(135deg, #cccccc, #b0b0b0);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        button[type="submit"]:not(.btn-submit) {
            display: none !important;
        }

        .success-message {
            text-align: center;
            color: #28a745;
            font-size: 15px;
            margin-top: 25px;
            padding: 12px;
            background: linear-gradient(145deg, #e9f7ef, #d4f1e0);
            border-radius: 8px;
            border: 1px solid #c3e6cb;
            box-shadow: 0 3px 8px var(--shadow-color);
            opacity: 0;
            transition: opacity 0.3s ease;
            font-family: var(--font-family);
            font-weight: 500;
        }

        .success-message.show {
            opacity: 1;
        }

        .error-message {
            text-align: center;
            color: var(--primary-color);
            font-size: 15px;
            margin-top: 25px;
            padding: 12px;
            background: linear-gradient(145deg, #f8d7da, #f5c6cb);
            border-radius: 8px;
            border: 1px solid #f5c6cb;
            box-shadow: 0 3px 8px var(--shadow-color);
            opacity: 0;
            transition: opacity 0.3s ease;
            font-family: var(--font-family);
            font-weight: 500;
        }

        .error-message.show {
            opacity: 1;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background: var(--background-lighter);
            margin: 5% auto;
            padding: 25px;
            border: 1px solid var(--border-color);
            border-radius: 12px;
            width: 90%;
            max-width: 900px;
            box-shadow: 0 6px 15px var(--shadow-color);
            position: relative;
            font-family: var(--font-family);
        }

        .close,
        .edit-close {
            position: absolute;
            right: 20px;
            top: 15px;
            color: var(--text-secondary);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover,
        .close:focus,
        .edit-close:hover,
        .edit-close:focus {
            color: var(--primary-color);
            text-decoration: none;
        }

        .modal-content h2 {
            font-size: 24px;
            margin-bottom: 25px;
            text-align: center;
            color: var(--text-color);
            border-bottom: 3px solid var(--primary-color);
            padding-bottom: 10px;
        }

        .table-wrapper {
            max-height: 400px;
            overflow-y: auto;
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }

        .modal .reclamation-table {
            width: 100%;
            border-collapse: collapse;
            font-family: var(--font-family);
        }

        .modal .reclamation-table th,
        .modal .reclamation-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            font-size: 13px;
            color: var(--text-color);
            vertical-align: middle;
        }

        .modal .reclamation-table th {
            background: linear-gradient(to bottom, #f1f2f3, #e9ecef);
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-secondary);
            font-size: 12px;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .modal .reclamation-table tbody tr:nth-child(odd) {
            background: var(--table-bg-odd);
        }

        .modal .reclamation-table tbody tr:nth-child(even) {
            background: var(--table-bg-even);
        }

        .modal .reclamation-table tbody tr:hover td {
            background: #e0e0e0;
        }

        .modal .reclamation-table .content-cell {
            max-width: 200px;
            white-space: normal;
            word-wrap: break-word;
            line-height: 1.4;
        }

        .modal .reclamation-table .status-cell {
            font-weight: 600;
        }

        .status-en_attente {
            color: #ffa500; /* Orange for pending */
        }

        .status-repondu {
            color: #28a745; /* Green for responded */
        }

        .urgent-cell {
            font-weight: 600;
        }

        .urgent-yes {
            color: var(--primary-color);
        }

        .modal .reclamation-table .no-data {
            text-align: center;
            color: var(--text-secondary);
            padding: 20px;
            font-style: italic;
        }

        .modal .reclamation-image {
            max-width: 40px;
            max-height: 40px;
            border-radius: 4px;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .modal .reclamation-image:hover {
            transform: scale(1.1);
        }

        .icon-edit {
            width: 20px;
            height: 20px;
            vertical-align: middle;
            filter: brightness(0.9);
            transition: filter 0.3s ease, transform 0.3s ease;
        }

        .edit-icon {
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 5px;
            border-radius: 50%;
            transition: background 0.3s ease;
        }

        .edit-icon:hover {
            background: rgba(220, 53, 69, 0.1);
        }

        .edit-icon:hover .icon-edit {
            filter: brightness(1.1);
            transform: scale(1.1);
        }

        @media screen and (max-width: 768px) {
            .reclamation-container {
                margin: 20px;
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid var(--primary-color);
            }

            h1 {
                font-size: 26px;
                margin-bottom: 25px;
                padding-bottom: 10px;
            }

            h2 {
                font-size: 20px;
                margin-top: 30px;
            }

            .form-group {
                margin-bottom: 25px;
            }

            .form-label {
                font-size: 14px;
                margin-bottom: 10px;
            }

            .form-input,
            .form-textarea,
            select.form-input {
                font-size: 14px;
                padding: 12px;
                border-radius: 6px;
            }

            .form-textarea {
                min-height: 100px;
                padding-right: 40px;
            }

            .image-upload-label {
                right: 12px;
            }

            .image-upload-icon {
                width: 30px;
                height: 30px;
            }

            .voice-input-icon {
                width: 20px;
                height: 20px;
            }

            .voice-input-icon {
                width: 20px;
                height: 20px;
            }

            .image-file-name {
                font-size: 13px;
                margin-top: 6px;
            }

            .word-counter {
                font-size: 13px;
                margin-bottom: 10px;
            }

            .progress-bar {
                width: 80px;
                height: 4px;
            }

            .action-buttons {
                flex-direction: column;
                gap: 8px;
            }

            .btn-correct-text {
            .btn-correct-text {
                font-size: 13px;
                padding: 8px 18px;
                width: 100%;
            }

            .form-errors,
            .form-error {
                font-size: 13px;
                padding: 6px 10px;
            }

            .button-container {
                margin-top: 25px;
                flex-direction: column;
                gap: 10px;
            }

            .history-button-container {
                margin-bottom: 20px;
            }

            .btn-submit,
            .btn-history,
            .btn-edit {
                font-size: 14px;
                padding: 10px 30px;
                border-radius: 6px;
                width: 100%;
            }

            .success-message,
            .error-message {
                font-size: 14px;
                margin-top: 20px;
                padding: 10px;
            }

            .modal-content {
                width: 95%;
                margin: 10% auto;
                padding: 15px;
            }

            .modal-content h2 {
                font-size: 20px;
            }

            .table-wrapper {
                max-height: 300px;
            }

            .modal .reclamation-table th,
            .modal .reclamation-table td {
                font-size: 11px;
                padding: 8px 10px;
            }

            .modal .reclamation-table th {
                font-size: 10px;
            }

            .modal .reclamation-table .content-cell {
                max-width: 150px;
            }

            .modal .reclamation-image {
                max-width: 30px;
                max-height: 30px;
            }

            .icon-edit {
                width: 18px;
                height: 18px;
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('reclamationForm');
            const titreInput = form.querySelector('input[name="form[titre]"]');
            const categoryInput = form.querySelector('select[name="category"]');
            const contenuInput = form.querySelector('textarea[name="form[contenu]"]');
            const correctTextBtn = document.getElementById('correctTextBtn');
            const voiceInputBtn = document.getElementById('voiceInputBtn');
            const imageFileInput = form.querySelector('#form_imageFile');
            const imageFileName = document.getElementById('imageFileName');
            const imageFileName = document.getElementById('imageFileName');
            const imageUploadLabel = form.querySelector('.image-upload-label');
            const submitButton = form.querySelector('.btn-submit');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            const wordCounter = document.getElementById('word-counter');
            const wordCount = document.getElementById('word-count');
            const progressFill = document.getElementById('progress-fill');
            const progressContainer = document.getElementById('progressContainer');
            const progressFillSubmission = document.getElementById('progressFillSubmission');
            const showHistoryBtn = document.getElementById('showHistoryBtn');
            const modal = document.getElementById('reclamationsModal');
            const closeModal = modal.querySelector('.close');
            const modalReclamationsBody = document.getElementById('modalReclamationsBody');
            const editReclamationModal = document.getElementById('editReclamationModal');
            const closeEditModal = editReclamationModal.querySelector('.edit-close');
            const editForm = document.getElementById('editReclamationForm');
            const editTitreInput = document.getElementById('editTitre');
            const editCategoryInput = document.getElementById('editCategory');
            const editContenuInput = document.getElementById('editContenu');
            const editUrgentInput = document.getElementById('editUrgent');
            const editWordCounter = document.getElementById('edit-word-counter');
            const editWordCount = document.getElementById('edit-word-count');
            const editProgressFill = document.getElementById('edit-progress-fill');
            const editTitreError = document.getElementById('editTitreError');
            const editCategoryError = document.getElementById('editCategoryError');
            const editContenuError = document.getElementById('editContenuError');
            const editVoiceInputBtn = document.getElementById('editVoiceInputBtn');
            const editCorrectTextBtn = document.getElementById('editCorrectTextBtn');

            function countWords(text) {
                const trimmedText = text.trim();
                if (!trimmedText) return 0;
                return trimmedText.split(/\s+/).length;
            }

            function updateWordCounter(input, counter, count, progress) {
                const value = input.value;
                const wordCountValue = countWords(value);
                const maxWords = 100;

                count.textContent = wordCountValue;
                counter.textContent = `${wordCountValue}/${maxWords} mots`;
                const progressPercentage = (wordCountValue / maxWords) * 100;
                progress.style.width = `${Math.min(progressPercentage, 100)}%`;

                if (wordCountValue > maxWords) {
                    counter.classList.add('warning');
                } else {
                    counter.classList.remove('warning');
                }
            }

            function extractKeywords(text) {
                const words = text.toLowerCase().split(/\s+/);
                const stopwords = ['je', 'de', 'le', 'la', 'et', 'un', 'une', 'pour', 'avec', 'mon', 'ma', 'mes', 'ce', 'cette'];
                return words.filter(word => !stopwords.includes(word) && word.length > 3).slice(0, 5);
            }

            function fetchRecentReclamations() {
                fetch('{{ path('app_reclamation_recent') }}', {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.reclamations) {
                        modalReclamationsBody.innerHTML = '';
                        data.reclamations.forEach(reclamation => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${reclamation.titre || 'N/A'}</td>
                                <td class="content-cell">${reclamation.contenu || 'N/A'}</td>
                                <td class="status-cell status-${reclamation.status}">
                                    ${reclamation.status || 'N/A'}
                                </td>
                                <td>${reclamation.datecreation || 'N/A'}</td>
                                <td class="urgent-cell ${reclamation.urgent ? 'urgent-yes' : ''}">
                                    ${reclamation.urgent ? 'Oui' : 'Non'}
                                </td>
                                <td>
                                    ${reclamation.image ? 
                                        `<a href="/Uploads/reclamations/${reclamation.image}" target="_blank">
                                            <img src="/Uploads/reclamations/${reclamation.image}" alt="Image de la réclamation" class="reclamation-image">
                                         </a>` : 
                                        'Aucune image'
                                    }
                                </td>
                                <td>
                                    ${reclamation.status === 'en_attente' && !reclamation.hasResponse ? 
                                        `<span class="edit-icon" data-id="${reclamation.id_rec}" data-titre="${reclamation.titre || ''}" data-contenu="${reclamation.contenu || ''}" data-urgent="${reclamation.urgent}">
                                            <svg class="icon-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                            </svg>
                                         </span>` : 
                                        ''
                                    }
                                </td>
                            `;
                            modalReclamationsBody.appendChild(row);
                        });

                        // Add event listeners to edit icons
                        document.querySelectorAll('.edit-icon').forEach(icon => {
                            icon.addEventListener('click', function () {
                                const id = this.getAttribute('data-id');
                                const titre = this.getAttribute('data-titre');
                                const contenu = this.getAttribute('data-contenu');
                                const urgent = this.getAttribute('data-urgent') === 'true';

                                document.getElementById('editReclamationId').value = id;
                                editTitreInput.value = titre;
                                editCategoryInput.value = ''; // Category is not persisted, reset to default
                                editContenuInput.value = contenu;
                                editUrgentInput.checked = urgent;
                                updateWordCounter(editContenuInput, editWordCounter, editWordCount, editProgressFill);

                                editReclamationModal.style.display = 'flex';
                            });
                        });
                    } else {
                        modalReclamationsBody.innerHTML = '<tr><td colspan="7" class="no-data">Aucune réclamation trouvée.</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération des réclamations récentes :', error);
                    modalReclamationsBody.innerHTML = '<tr><td colspan="7" class="no-data">Erreur lors du chargement des réclamations.</td></tr>';
                });
            }

            // Show modal and fetch reclamations
            showHistoryBtn.addEventListener('click', function () {
                modal.style.display = 'flex';
                fetchRecentReclamations();
            });

            // Close modal
            closeModal.addEventListener('click', function () {
                modal.style.display = 'none';
            });

            // Close modal when clicking outside
            window.addEventListener('click', function (event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });

            // Close edit modal
            closeEditModal.addEventListener('click', function () {
                editReclamationModal.style.display = 'none';
            });

            // Close edit modal when clicking outside
            window.addEventListener('click', function (event) {
                if (event.target === editReclamationModal) {
                    editReclamationModal.style.display = 'none';
                }
            });

            // Handle edit form submission
            editForm.addEventListener('submit', function (e) {
                e.preventDefault();

                let hasError = false;

                // Clear previous errors
                editTitreError.style.display = 'none';
                editCategoryError.style.display = 'none';
                editContenuError.style.display = 'none';
                editTitreInput.classList.remove('error');
                editCategoryInput.classList.remove('error');
                editContenuInput.classList.remove('error');

                // Validate titre
                if (!editTitreInput.value.trim()) {
                    hasError = true;
                    editTitreError.textContent = 'Le champ Objet est requis.';
                    editTitreError.style.display = 'block';
                    editTitreInput.classList.add('error');
                } else if (editTitreInput.value.length < 5) {
                    hasError = true;
                    editTitreError.textContent = 'Le titre doit contenir au moins 5 caractères.';
                    editTitreError.style.display = 'block';
                    editTitreInput.classList.add('error');
                } else if (editTitreInput.value.length > 50) {
                    hasError = true;
                    editTitreError.textContent = 'Le titre ne peut pas dépasser 50 caractères.';
                    editTitreError.style.display = 'block';
                    editTitreInput.classList.add('error');
                }

                // Validate category (client-side only)
                if (!editCategoryInput.value) {
                    hasError = true;
                    editCategoryError.textContent = 'Veuillez sélectionner une catégorie.';
                    editCategoryError.style.display = 'block';
                    editCategoryInput.classList.add('error');
                }

                // Validate contenu
                const wordCountValue = countWords(editContenuInput.value);
                if (!editContenuInput.value.trim()) {
                    hasError = true;
                    editContenuError.textContent = 'Le champ Votre réclamation est requis.';
                    editContenuError.style.display = 'block';
                    editContenuInput.classList.add('error');
                } else if (editContenuInput.value.length < 10) {
                    hasError = true;
                    editContenuError.textContent = 'Le contenu doit contenir au moins 10 caractères.';
                    editContenuError.style.display = 'block';
                    editContenuInput.classList.add('error');
                } else if (wordCountValue > 100) {
                    hasError = true;
                    editContenuError.textContent = 'Le contenu ne peut pas dépasser 100 mots.';
                    editContenuError.style.display = 'block';
                    editContenuInput.classList.add('error');
                }

                if (hasError) {
                    return;
                }

                const submitButton = editForm.querySelector('.btn-submit');
                submitButton.disabled = true;
                submitButton.textContent = 'Enregistrement...';

                const formData = new FormData();
                formData.append('id_rec', document.getElementById('editReclamationId').value);
                formData.append('titre', editTitreInput.value);
                formData.append('contenu', editContenuInput.value);
                formData.append('urgent', editUrgentInput.checked);
                const keywords = extractKeywords(editContenuInput.value);
                formData.append('keywords', keywords.join(','));

                fetch('{{ path('app_reclamation_edit') }}', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        successMessage.innerHTML = 'Réclamation modifiée avec succès !';
                        successMessage.style.display = 'block';
                        successMessage.classList.add('show');
                        editReclamationModal.style.display = 'none';
                        editForm.reset();
                        setTimeout(() => {
                            successMessage.classList.remove('show');
                            setTimeout(() => {
                                successMessage.style.display = 'none';
                            }, 300);
                        }, 5000);
                        fetchRecentReclamations();
                    } else {
                        errorMessage.textContent = data.message || 'Une erreur est survenue lors de la modification.';
                        errorMessage.style.display = 'block';
                        errorMessage.classList.add('show');
                        setTimeout(() => {
                            errorMessage.classList.remove('show');
                            setTimeout(() => {
                                errorMessage.style.display = 'none';
                            }, 300);
                        }, 5000);
                    }
                    submitButton.disabled = false;
                    submitButton.textContent = 'Enregistrer';
                })
                .catch(error => {
                    console.error('Erreur lors de la modification :', error);
                    errorMessage.textContent = 'Une erreur est survenue lors de la modification.';
                    errorMessage.style.display = 'block';
                    errorMessage.classList.add('show');
                    submitButton.disabled = false;
                    submitButton.textContent = 'Enregistrer';
                    setTimeout(() => {
                        errorMessage.classList.remove('show');
                        setTimeout(() => {
                            errorMessage.style.display = 'none';
                        }, 300);
                    }, 5000);
                });
            });

            // Update word counter for edit form
            editContenuInput.addEventListener('input', function () {
                updateWordCounter(editContenuInput, editWordCounter, editWordCount, editProgressFill);
                const contenuValue = editContenuInput.value.trim();
                const wordCountValue = countWords(contenuValue);
                if (contenuValue.length >= 10 && /\S/.test(contenuValue) && wordCountValue <= 100) {
                    editContenuInput.classList.remove('error');
                    editContenuError.style.display = 'none';
                }
            });

            // Voice input for edit form
            editVoiceInputBtn.addEventListener('click', function () {
                if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                    const recognition = new SpeechRecognition();
                    recognition.lang = 'fr-FR';
                    recognition.interimResults = false;
                    recognition.maxAlternatives = 1;

                    recognition.start();
                    editVoiceInputBtn.textContent = 'Enregistrement...';

                    recognition.onresult = function(event) {
                        const transcript = event.results[0][0].transcript;
                        editContenuInput.value = transcript;
                        updateWordCounter(editContenuInput, editWordCounter, editWordCount, editProgressFill);
                        editVoiceInputBtn.innerHTML = `<img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">`;
                    };

                    recognition.onerror = function(event) {
                        console.error('Erreur de reconnaissance vocale :', event.error);
                        editVoiceInputBtn.innerHTML = `<img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">`;
                        editContenuError.textContent = 'Erreur lors de la reconnaissance vocale.';
                        editContenuError.style.display = 'block';
                    };

                    recognition.onend = function() {
                        editVoiceInputBtn.innerHTML = `<img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">`;
                    };
                } else {
                    editContenuError.textContent = 'La reconnaissance vocale n\'est pas supportée par votre navigateur.';
                    editContenuError.style.display = 'block';
                }
            });

            // Correct text for edit form
            editCorrectTextBtn.addEventListener('click', function () {
                const textToCorrect = editContenuInput.value.trim();
                if (!textToCorrect) {
                    editContenuError.textContent = 'Veuillez entrer une réclamation à corriger.';
                    editContenuError.style.display = 'block';
                    editContenuInput.classList.add('error');
                    return;
                }

                editCorrectTextBtn.disabled = true;
                editCorrectTextBtn.textContent = 'Correction en cours...';

                fetch('https://api.languagetool.org/v2/check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        'text': textToCorrect,
                        'language': 'fr',
                        'enabledOnly': 'false'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    let correctedText = textToCorrect;
                    const matches = data.matches;

                    if (matches && matches.length > 0) {
                        matches.reverse().forEach(match => {
                            const start = match.offset;
                            const length = match.length;
                            const replacement = match.replacements[0]?.value || match.context.text;
                            correctedText = correctedText.substring(0, start) + replacement + correctedText.substring(start + length);
                        });
                    }

                    editContenuInput.value = correctedText;
                    updateWordCounter(editContenuInput, editWordCounter, editWordCount, editProgressFill);

                    editCorrectTextBtn.disabled = false;
                    editCorrectTextBtn.textContent = 'Corriger la réclamation';

                    if (matches.length === 0) {
                        const info = document.createElement('div');
                        info.className = 'success-message';
                        info.textContent = 'Aucune correction nécessaire pour la réclamation.';
                        editContenuInput.parentNode.appendChild(info);
                        setTimeout(() => {
                            info.classList.add('show');
                            setTimeout(() => {
                                info.remove();
                            }, 3000);
                        }, 100);
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la correction :', error);
                    editContenuError.textContent = 'Erreur lors de la correction de la réclamation.';
                    editContenuError.style.display = 'block';
                    editCorrectTextBtn.disabled = false;
                    editCorrectTextBtn.textContent = 'Corriger la réclamation';
                });
            });

            correctTextBtn.addEventListener('click', function () {
                const textToCorrect = contenuInput.value.trim();
                if (!textToCorrect) {
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Veuillez entrer une réclamation à corriger.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                    return;
                }

                correctTextBtn.disabled = true;
                correctTextBtn.textContent = 'Correction en cours...';

                fetch('https://api.languagetool.org/v2/check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        'text': textToCorrect,
                        'language': 'fr',
                        'enabledOnly': 'false'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    let correctedText = textToCorrect;
                    const matches = data.matches;

                    if (matches && matches.length > 0) {
                        matches.reverse().forEach(match => {
                            const start = match.offset;
                            const length = match.length;
                            const replacement = match.replacements[0]?.value || match.context.text;
                            correctedText = correctedText.substring(0, start) + replacement + correctedText.substring(start + length);
                        });
                    }

                    contenuInput.value = correctedText;
                    updateWordCounter(contenuInput, wordCounter, wordCount, progressFill);

                    correctTextBtn.disabled = false;
                    correctTextBtn.textContent = 'Corriger la réclamation';

                    if (matches.length === 0) {
                        const info = document.createElement('div');
                        info.className = 'success-message';
                        info.textContent = 'Aucune correction nécessaire pour la réclamation.';
                        contenuInput.parentNode.appendChild(info);
                        setTimeout(() => {
                            info.classList.add('show');
                            setTimeout(() => {
                                info.remove();
                            }, 3000);
                        }, 100);
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la correction :', error);
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'form-error';
                    errorDiv.textContent = 'Erreur lors de la correction de la réclamation.';
                    contenuInput.parentNode.appendChild(errorDiv);
                    correctTextBtn.disabled = false;
                    correctTextBtn.textContent = 'Corriger la réclamation';
                });
            });

            voiceInputBtn.addEventListener('click', function () {
                if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                    const recognition = new SpeechRecognition();
                    recognition.lang = 'fr-FR';
                    recognition.interimResults = false;
                    recognition.maxAlternatives = 1;

                    recognition.start();
                    voiceInputBtn.innerHTML = 'Enregistrement...';

                    recognition.onresult = function(event) {
                        const transcript = event.results[0][0].transcript;
                        contenuInput.value = transcript;
                        updateWordCounter(contenuInput, wordCounter, wordCount, progressFill);
                        voiceInputBtn.innerHTML = `<img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">`;
                    };

                    recognition.onerror = function(event) {
                        console.error('Erreur de reconnaissance vocale :', event.error);
                        voiceInputBtn.innerHTML = `<img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">`;
                        const error = document.createElement('div');
                        error.className = 'form-error';
                        error.textContent = 'Erreur lors de la reconnaissance vocale.';
                        contenuInput.parentNode.appendChild(error);
                    };

                    recognition.onend = function() {
                        voiceInputBtn.innerHTML = `<img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">`;
                    };
                } else {
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'La reconnaissance vocale n\'est pas supportée par votre navigateur.';
                    contenuInput.parentNode.appendChild(error);
                }
            });

            imageUploadLabel.addEventListener('click', function () {
                console.log('Icône cliquée, déclenchement de l\'input file...');
                imageFileInput.click();
            });

            imageFileInput.addEventListener('change', function () {
                console.log('Fichier sélectionné :', this.files);
                if (this.files.length > 0) {
                    imageFileName.textContent = this.files[0].name;
                } else {
                    imageFileName.textContent = '';
                }
            });

            contenuInput.addEventListener('input', function () {
                updateWordCounter(contenuInput, wordCounter, wordCount, progressFill);

                const contenuValue = contenuInput.value.trim();
                const wordCountValue = countWords(contenuValue);
                if (contenuValue.length >= 10 && /\S/.test(contenuValue) && wordCountValue <= 100) {
                    contenuInput.classList.remove('error');
                }
            });

            form.addEventListener('submit', function (e) {
                e.preventDefault();

                let hasError = false;

                const existingErrors = form.querySelectorAll('.form-error');
                existingErrors.forEach(error => error.remove());

                if (!titreInput.value.trim()) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le champ Objet est requis.';
                    titreInput.parentNode.appendChild(error);
                    titreInput.classList.add('error');
                } else if (titreInput.value.length < 5) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le titre doit contenir au moins 5 caractères.';
                    titreInput.parentNode.appendChild(error);
                    titreInput.classList.add('error');
                } else if (titreInput.value.length > 50) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le titre ne peut pas dépasser 50 caractères.';
                    titreInput.parentNode.appendChild(error);
                    titreInput.classList.add('error');
                } else {
                    titreInput.classList.remove('error');
                }

                if (!categoryInput.value) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Veuillez sélectionner une catégorie.';
                    categoryInput.parentNode.appendChild(error);
                    categoryInput.classList.add('error');
                } else {
                    categoryInput.classList.remove('error');
                }

                const wordCountValue = countWords(contenuInput.value);
                if (!contenuInput.value.trim()) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le champ Votre réclamation est requis.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                } else if (contenuInput.value.length < 10) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le contenu doit contenir au moins 10 caractères.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                } else if (wordCountValue > 100) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le contenu ne peut pas dépasser 100 mots.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                } else {
                    contenuInput.classList.remove('error');
                }

                if (hasError) {
                    return;
                }

                submitButton.disabled = true;
                submitButton.textContent = 'Envoi en cours...';
                progressContainer.style.display = 'block';
                progressFillSubmission.style.width = '100%';

                const keywords = extractKeywords(contenuInput.value);
                const formData = new FormData(form);
                formData.append('keywords', keywords.join(','));

                fetch(form.action, {
                    method: form.method,
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.message || 'Erreur lors de l\'envoi de la réclamation.');
                    }

                    successMessage.innerHTML = `Réclamation envoyée avec succès !`;
                    successMessage.style.display = 'block';
                    successMessage.classList.add('show');

                    form.reset();
                    imageFileName.textContent = '';
                    updateWordCounter(contenuInput, wordCounter, wordCount, progressFill);
                    categoryInput.selectedIndex = 0;

                    submitButton.disabled = false;
                    submitButton.textContent = 'Envoyer';
                    progressContainer.style.display = 'none';
                    progressFillSubmission.style.width = '0';

                    setTimeout(() => {
                        successMessage.classList.remove('show');
                        setTimeout(() => {
                            successMessage.style.display = 'none';
                        }, 300);
                    }, 5000);
                })
                .catch(error => {
                    console.error('Erreur lors de la soumission :', error);
                    errorMessage.textContent = error.message || 'Une erreur est survenue lors de l\'envoi de la réclamation.';
                    errorMessage.style.display = 'block';
                    errorMessage.classList.add('show');
                    submitButton.disabled = false;
                    submitButton.textContent = 'Envoyer';
                    progressContainer.style.display = 'none';
                    progressFillSubmission.style.width = '0';

                    setTimeout(() => {
                        errorMessage.classList.remove('show');
                        setTimeout(() => {
                            errorMessage.style.display = 'none';
                        }, 300);
                    }, 5000);
                });
            });

            // Initial word counter update
            updateWordCounter(contenuInput, wordCounter, wordCount, progressFill);
        });
    </script>
{% endblock %}
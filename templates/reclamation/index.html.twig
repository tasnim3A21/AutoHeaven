{% extends 'base.html.twig' %}

{% block title %}Reclamation{% endblock %}

{% block content %}
    <div class="reclamation-container">
        <h1>Passer une réclamation</h1>

        <!-- History Button -->
        <div class="button-container history-button-container">
            <a href="{{ path('app_reclamation_history') }}" class="btn-history">Voir l'historique des réclamations</a>
        </div>

        {{ form_start(reclamationForm, {'attr': {'id': 'reclamationForm', 'novalidate': 'novalidate'}}) }}
            <div class="form-group">
                {{ form_label(reclamationForm.titre, 'Objet', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(reclamationForm.titre, {'attr': {'class': 'form-input', 'required': 'required'}}) }}
                {{ form_errors(reclamationForm.titre) }}
            </div>

            <div class="form-group">
                <label for="category" class="form-label">Catégorie</label>
                <select id="category" name="category" class="form-input" required>
                    <option value="">Sélectionnez une catégorie</option>
                    <option value="livraison">Problème de livraison</option>
                    <option value="produit">Produit défectueux</option>
                    <option value="service">Service client</option>
                    <option value="autre">Autre</option>
                </select>
            </div>

            <div class="form-group">
                <div class="label-with-icon">
                    {{ form_label(reclamationForm.contenu, 'Votre réclamation', {'label_attr': {'class': 'form-label'}}) }}
                    <span id="voiceInputBtn" class="voice-input-label">
                        <img src="{{ asset('images/mic.png') }}" alt="Dicter la réclamation" class="voice-input-icon">
                    </span>
                </div>
                <div class="textarea-container">
                    {{ form_widget(reclamationForm.contenu, {'attr': {'class': 'form-textarea', 'required': 'required', 'aria-describedby': 'word-counter message-error'}}) }}
                    <label for="form_imageFile" class="image-upload-label">
                        <img src="{{ asset('images/img.png') }}" alt="Joindre une image" class="image-upload-icon">
                    </label>
                    {{ form_widget(reclamationForm.imageFile, {'attr': {'id': 'form_imageFile'}}) }}
                </div>
                {{ form_errors(reclamationForm.contenu) }}
                {{ form_errors(reclamationForm.imageFile) }}
                <span id="imageFileName" class="image-file-name"></span>
                <div class="word-counter" id="word-counter">
                    <span id="word-count">0</span>/100 mots
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill"></div>
                    </div>
                </div>
                <div class="action-buttons">
                    <button type="button" id="correctTextBtn" class="btn-correct-text">Corriger la réclamation</button>
                </div>
            </div>

            <div class="form-group">
                {{ form_label(reclamationForm.urgent, 'Réclamation urgente', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(reclamationForm.urgent, {'attr': {'class': 'form-checkbox'}}) }}
                {{ form_errors(reclamationForm.urgent) }}
            </div>

            <div class="button-container">
                <button type="submit" class="btn-submit">Envoyer</button>
            </div>

            <div class="progress-container" id="progressContainer" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFillSubmission"></div>
                </div>
            </div>
        {{ form_end(reclamationForm) }}

        <div id="successMessage" class="success-message" style="display: none;">
            Réclamation envoyée avec succès !
        </div>
        <div id="errorMessage" class="error-message" style="display: none;">
            Une erreur est survenue.
        </div>

        <!-- Recent Reclamations Section -->
        <div class="recent-reclamations-container" id="recentReclamations" style="display: none;">
            <h2>Réclamations Récentes</h2>
            <table class="reclamation-table">
                <thead>
                    <tr>
                        <th>Objet</th>
                        <th>Contenu</th>
                        <th>Statut</th>
                        <th>Date</th>
                        <th>Urgent</th>
                        <th>Image</th>
                    </tr>
                </thead>
                <tbody id="recentReclamationsBody">
                    <!-- Populated dynamically via JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <style>
        :root {
            --primary-color: #dc3545;
            --primary-hover: #c82333;
            --text-color: #2d2d2d;
            --text-secondary: #4a4a4a;
            --background-light: #f8f9fa;
            --background-lighter: #ffffff;
            --border-color: #d5d5d5;
            --shadow-color: rgba(0, 0, 0, 0.08);
            --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            --table-bg-odd: #f7e6e6; /* Light red for odd rows */
            --table-bg-even: #f0f8ff; /* Light blue for even rows */
        }

        .reclamation-container {
            max-width: 700px;
            margin: 40px auto;
            padding: 30px;
            background: linear-gradient(145deg, var(--background-lighter), #f5f6f8);
            border-radius: 12px;
            box-shadow: 0 6px 15px var(--shadow-color);
            font-family: var(--font-family);
            border: 1px solid var(--border-color);
            border-left: 6px solid var(--primary-color);
            position: relative;
            overflow: hidden;
        }

        .reclamation-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, var(--primary-color), transparent);
        }

        h1, h2 {
            font-family: var(--font-family);
            color: var(--text-color);
            margin: 0 auto 35px;
            font-size: 30px;
            font-weight: 700;
            text-align: center;
            letter-spacing: 1.2px;
            padding-bottom: 12px;
            border-bottom: 3px solid var(--primary-color);
            width: fit-content;
            position: relative;
        }

        h2 {
            font-size: 24px;
            margin-top: 40px;
        }

        h1::after, h2::after {
            content: '';
            position: absolute;
            bottom: -3px;
            left: 50%;
            transform: translateX(-50%);
            width: 60%;
            height: 3px;
            background: linear-gradient(to right, transparent, var(--primary-hover), transparent);
        }

        .form-group {
            margin-bottom: 30px;
            text-align: left;
        }

        .form-label {
            display: block;
            margin-bottom: 12px;
            font-family: var(--font-family);
            font-weight: 700;
            color: var(--text-color);
            font-size: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            line-height: 1;
        }

        .label-with-icon {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-input,
        .form-textarea,
        select.form-input,
        .form-checkbox {
            width: 100%;
            padding: 14px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 15px;
            font-family: var(--font-family);
            background: linear-gradient(to right, var(--background-lighter), #f9f9f9);
            box-shadow: inset 0 2px 5px var(--shadow-color);
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            line-height: 1.6;
        }

        .form-checkbox {
            width: auto;
            padding: 0;
            margin-right: 10px;
        }

        .form-textarea {
            resize: vertical;
            min-height: 120px;
            padding-right: 50px;
        }

        .form-input:focus,
        .form-textarea:focus,
        select.form-input:focus,
        .form-checkbox:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.25), inset 0 2px 5px var(--shadow-color);
            outline: none;
        }

        .form-input.error,
        .form-textarea.error {
            border-color: var(--primary-color);
            background: #fff5f5;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.25), inset 0 2px 5px var(--shadow-color);
        }

        .textarea-container {
            position: relative;
            display: inline-block;
            width: 100%;
        }

        .image-upload-label {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        .image-upload-label:hover {
            transform: translateY(-50%) scale(1.1);
            opacity: 0.8;
        }

        .image-upload-label:focus {
            outline: none;
            transform: translateY(-50%) scale(1.1);
            opacity: 0.8;
        }

        .image-upload-icon {
            width: 36px;
            height: 36px;
            vertical-align: middle;
            filter: brightness(0.9);
            transition: filter 0.3s ease;
        }

        .image-upload-label:hover .image-upload-icon {
            filter: brightness(1.1);
        }

        input[type="file"] {
            display: none;
        }

        .voice-input-label {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: transform 0.3s ease, opacity 0.3s ease;
            margin: 0;
            padding: 0;
        }

        .voice-input-label:hover {
            transform: scale(1.1);
            opacity: 0.8;
        }

        .voice-input-label:focus {
            outline: none;
            transform: scale(1.1);
            opacity: 0.8;
        }

        .voice-input-icon {
            width: 24px;
            height: 24px;
            vertical-align: middle;
            filter: brightness(0.9);
            transition: filter 0.3s ease;
        }

        .voice-input-label:hover .voice-input-icon {
            filter: brightness(1.1);
        }

        .image-file-name {
            display: block;
            margin-top: 8px;
            font-size: 14px;
            color: var(--text-secondary);
            font-family: var(--font-family);
            font-style: italic;
        }

        .word-counter {
            font-size: 14px;
            color: var(--text-secondary);
            margin-top: 8px;
            margin-bottom: 15px;
            font-family: var(--font-family);
            display: flex;
            align-items: center;
            gap: 10px;
            transition: color 0.3s ease;
        }

        .word-counter.warning {
            color: var(--primary-color);
        }

        .progress-bar {
            width: 100px;
            height: 5px;
            background: var(--border-color);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            width: 0;
            height: 100%;
            background: linear-gradient(to right, var(--primary-color), var(--primary-hover));
            transition: width 0.3s ease;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn-correct-text {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: #ffffff;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-family: var(--font-family);
            font-weight: 600;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 3px 8px var(--shadow-color);
            letter-spacing: 0.5px;
        }

        .btn-correct-text:hover {
            background: linear-gradient(135deg, #5a6268, #4b5156);
            transform: translateY(-1px);
            box-shadow: 0 5px 12px rgba(108, 117, 125, 0.3);
        }

        .btn-correct-text:focus {
            outline: none;
            box-shadow: 0 0 8px rgba(108, 117, 125, 0.5);
        }

        .btn-correct-text:disabled {
            background: linear-gradient(135deg, #cccccc, #b0b0b0);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .progress-container {
            margin-top: 10px;
            width: 100%;
        }

        .progress-bar {
            width: 100%;
            height: 5px;
            background: var(--border-color);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            width: 0;
            height: 100%;
            background: linear-gradient(to right, var(--primary-color), var(--primary-hover));
            transition: width 0.3s ease;
        }

        .form-errors {
            color: var(--primary-color) !important;
            font-size: 14px;
            margin-top: 8px;
            font-family: var(--font-family);
            font-weight: 500;
            background: #fff5f5;
            padding: 8px 12px;
            border-radius: 6px;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 2px 5px var(--shadow-color);
        }

        .form-error {
            color: var(--primary-color) !important;
            font-size: 14px;
            margin-top: 8px;
            font-family: var(--font-family);
            font-weight: 500;
            background: #fff5f5;
            padding: 8px 12px;
            border-radius: 6px;
            border-left: 4px solid var(--primary-color);
            box-shadow: 0 2px 5px var(--shadow-color);
        }

        .button-container {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .history-button-container {
            margin-bottom: 30px;
        }

        .btn-submit,
        .btn-history {
            background: linear-gradient(135deg, var(--primary-color), #e4606d);
            color: #ffffff;
            padding: 12px 35px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            font-family: var(--font-family);
            font-weight: 600;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 10px var(--shadow-color);
            letter-spacing: 0.8px;
            text-decoration: none;
            display: inline-block;
        }

        .btn-submit:hover,
        .btn-history:hover {
            background: linear-gradient(135deg, var(--primary-hover), #d44d5a);
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(220, 53, 69, 0.3);
        }

        .btn-submit:focus,
        .btn-history:focus {
            outline: none;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
        }

        .btn-submit:disabled {
            background: linear-gradient(135deg, #cccccc, #b0b0b0);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        button[type="submit"]:not(.btn-submit) {
            display: none !important;
        }

        .success-message {
            text-align: center;
            color: #28a745;
            font-size: 15px;
            margin-top: 25px;
            padding: 12px;
            background: linear-gradient(145deg, #e9f7ef, #d4f1e0);
            border-radius: 8px;
            border: 1px solid #c3e6cb;
            box-shadow: 0 3px 8px var(--shadow-color);
            opacity: 0;
            transition: opacity 0.3s ease;
            font-family: var(--font-family);
            font-weight: 500;
        }

        .success-message.show {
            opacity: 1;
        }

        .error-message {
            text-align: center;
            color: var(--primary-color);
            font-size: 15px;
            margin-top: 25px;
            padding: 12px;
            background: linear-gradient(145deg, #f8d7da, #f5c6cb);
            border-radius: 8px;
            border: 1px solid #f5c6cb;
            box-shadow: 0 3px 8px var(--shadow-color);
            opacity: 0;
            transition: opacity 0.3s ease;
            font-family: var(--font-family);
            font-weight: 500;
        }

        .error-message.show {
            opacity: 1;
        }

        .recent-reclamations-container {
            margin-top: 40px;
        }

        .reclamation-table {
            width: 100%;
            max-width: 700px;
            margin: 0 auto;
            border-collapse: collapse;
            font-family: var(--font-family);
        }

        .reclamation-table th,
        .reclamation-table td {
            padding: 8px 10px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            font-size: 12px;
            color: var(--text-color);
        }

        .reclamation-table th {
            background: linear-gradient(to bottom, #f1f2f3, #e9ecef);
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-secondary);
            font-size: 11px;
        }

        .reclamation-table tbody tr:nth-child(odd) {
            background: var(--table-bg-odd);
        }

        .reclamation-table tbody tr:nth-child(even) {
            background: var(--table-bg-even);
        }

        .reclamation-table td {
            background: transparent;
        }

        .reclamation-table tr:hover td {
            background: #e0e0e0;
        }

        .reclamation-image {
            max-width: 40px;
            max-height: 40px;
            border-radius: 4px;
            object-fit: cover;
        }

        @media screen and (max-width: 768px) {
            .reclamation-container {
                margin: 20px;
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid var(--primary-color);
            }

            h1 {
                font-size: 26px;
                margin-bottom: 25px;
                padding-bottom: 10px;
            }

            h2 {
                font-size: 20px;
                margin-top: 30px;
            }

            .form-group {
                margin-bottom: 25px;
            }

            .form-label {
                font-size: 14px;
                margin-bottom: 10px;
            }

            .form-input,
            .form-textarea,
            select.form-input {
                font-size: 14px;
                padding: 12px;
                border-radius: 6px;
            }

            .form-textarea {
                min-height: 100px;
                padding-right: 40px;
            }

            .image-upload-label {
                right: 12px;
            }

            .image-upload-icon {
                width: 30px;
                height: 30px;
            }

            .voice-input-icon {
                width: 20px;
                height: 20px;
            }

            .image-file-name {
                font-size: 13px;
                margin-top: 6px;
            }

            .word-counter {
                font-size: 13px;
                margin-bottom: 10px;
            }

            .progress-bar {
                width: 80px;
                height: 4px;
            }

            .action-buttons {
                flex-direction: column;
                gap: 8px;
            }

            .btn-correct-text {
                font-size: 13px;
                padding: 8px 18px;
                width: 100%;
            }

            .form-errors,
            .form-error {
                font-size: 13px;
                padding: 6px 10px;
            }

            .button-container {
                margin-top: 25px;
                flex-direction: column;
                gap: 10px;
            }

            .history-button-container {
                margin-bottom: 20px;
            }

            .btn-submit,
            .btn-history {
                font-size: 14px;
                padding: 10px 30px;
                border-radius: 6px;
                width: 100%;
            }

            .success-message,
            .error-message {
                font-size: 14px;
                margin-top: 20px;
                padding: 10px;
            }

            .recent-reclamations-container {
                margin-top: 30px;
            }

            .reclamation-table {
                max-width: 100%;
            }

            .reclamation-table th,
            .reclamation-table td {
                font-size: 10px;
                padding: 6px 8px;
            }

            .reclamation-table th {
                font-size: 9px;
            }

            .reclamation-image {
                max-width: 30px;
                max-height: 30px;
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('reclamationForm');
            const titreInput = form.querySelector('input[name="form[titre]"]');
            const categoryInput = form.querySelector('select[name="category"]');
            const contenuInput = form.querySelector('textarea[name="form[contenu]"]');
            const correctTextBtn = document.getElementById('correctTextBtn');
            const voiceInputBtn = document.getElementById('voiceInputBtn');
            const imageFileInput = form.querySelector('#form_imageFile');
            const imageFileName = document.getElementById('imageFileName');
            const imageUploadLabel = form.querySelector('.image-upload-label');
            const submitButton = form.querySelector('.btn-submit');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');
            const wordCounter = document.getElementById('word-counter');
            const wordCount = document.getElementById('word-count');
            const progressFill = document.getElementById('progress-fill');
            const progressContainer = document.getElementById('progressContainer');
            const progressFillSubmission = document.getElementById('progressFillSubmission');
            const recentReclamationsContainer = document.getElementById('recentReclamations');
            const recentReclamationsBody = document.getElementById('recentReclamationsBody');

            function countWords(text) {
                const trimmedText = text.trim();
                if (!trimmedText) return 0;
                return trimmedText.split(/\s+/).length;
            }

            function updateWordCounter() {
                const contenuValue = contenuInput.value;
                const wordCountValue = countWords(contenuValue);
                const maxWords = 100;

                wordCount.textContent = wordCountValue;
                wordCounter.textContent = `${wordCountValue}/${maxWords} mots`;
                const progressPercentage = (wordCountValue / maxWords) * 100;
                progressFill.style.width = `${Math.min(progressPercentage, 100)}%`;

                if (wordCountValue > maxWords) {
                    wordCounter.classList.add('warning');
                } else {
                    wordCounter.classList.remove('warning');
                }
            }

            function extractKeywords(text) {
                const words = text.toLowerCase().split(/\s+/);
                const stopwords = ['je', 'de', 'le', 'la', 'et', 'un', 'une', 'pour', 'avec', 'mon', 'ma', 'mes', 'ce', 'cette'];
                return words.filter(word => !stopwords.includes(word) && word.length > 3).slice(0, 5);
            }

            function fetchRecentReclamations() {
                fetch('{{ path('app_reclamation_recent') }}', {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.reclamations) {
                        recentReclamationsBody.innerHTML = '';
                        data.reclamations.forEach(reclamation => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${reclamation.titre || 'N/A'}</td>
                                <td>${reclamation.contenu || 'N/A'}</td>
                                <td>${reclamation.status || 'N/A'}</td>
                                <td>${reclamation.datecreation || 'N/A'}</td>
                                <td>${reclamation.urgent ? 'Oui' : 'Non'}</td>
                                <td>
                                    ${reclamation.image ? 
                                        `<a href="/uploads/reclamations/${reclamation.image}" target="_blank">
                                            <img src="/uploads/reclamations/${reclamation.image}" alt="Image de la réclamation" class="reclamation-image">
                                         </a>` : 
                                        'Aucune image'
                                    }
                                </td>
                            `;
                            recentReclamationsBody.appendChild(row);
                        });
                        recentReclamationsContainer.style.display = 'block';
                    } else {
                        recentReclamationsContainer.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération des réclamations récentes :', error);
                    recentReclamationsContainer.style.display = 'none';
                });
            }

            correctTextBtn.addEventListener('click', function () {
                const textToCorrect = contenuInput.value.trim();
                if (!textToCorrect) {
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Veuillez entrer une réclamation à corriger.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                    return;
                }

                correctTextBtn.disabled = true;
                correctTextBtn.textContent = 'Correction en cours...';

                fetch('https://api.languagetool.org/v2/check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        'text': textToCorrect,
                        'language': 'fr',
                        'enabledOnly': 'false'
                    })
                })
                .then(response => response.json())
                .then(data => {
                    let correctedText = textToCorrect;
                    const matches = data.matches;

                    if (matches && matches.length > 0) {
                        matches.reverse().forEach(match => {
                            const start = match.offset;
                            const length = match.length;
                            const replacement = match.replacements[0]?.value || match.context.text;
                            correctedText = correctedText.substring(0, start) + replacement + correctedText.substring(start + length);
                        });
                    }

                    contenuInput.value = correctedText;
                    updateWordCounter();

                    correctTextBtn.disabled = false;
                    correctTextBtn.textContent = 'Corriger la réclamation';

                    if (matches.length === 0) {
                        const info = document.createElement('div');
                        info.className = 'success-message';
                        info.textContent = 'Aucune correction nécessaire pour la réclamation.';
                        contenuInput.parentNode.appendChild(info);
                        setTimeout(() => {
                            info.classList.add('show');
                            setTimeout(() => {
                                info.remove();
                            }, 3000);
                        }, 100);
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la correction :', error);
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'form-error';
                    errorDiv.textContent = 'Erreur lors de la correction de la réclamation.';
                    contenuInput.parentNode.appendChild(errorDiv);
                    correctTextBtn.disabled = false;
                    correctTextBtn.textContent = 'Corriger la réclamation';
                });
            });

            voiceInputBtn.addEventListener('click', function () {
                if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
                    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
                    const recognition = new SpeechRecognition();
                    recognition.lang = 'fr-FR';
                    recognition.interimResults = false;
                    recognition.maxAlternatives = 1;

                    recognition.start();
                    voiceInputBtn.textContent = 'Enregistrement...';

                    recognition.onresult = function(event) {
                        const transcript = event.results[0][0].transcript;
                        contenuInput.value = transcript;
                        updateWordCounter();
                        voiceInputBtn.textContent = 'Dicter la réclamation';
                    };

                    recognition.onerror = function(event) {
                        console.error('Erreur de reconnaissance vocale :', event.error);
                        voiceInputBtn.textContent = 'Dicter la réclamation';
                        const error = document.createElement('div');
                        error.className = 'form-error';
                        error.textContent = 'Erreur lors de la reconnaissance vocale.';
                        contenuInput.parentNode.appendChild(error);
                    };

                    recognition.onend = function() {
                        voiceInputBtn.textContent = 'Dicter la réclamation';
                    };
                } else {
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'La reconnaissance vocale n\'est pas supportée par votre navigateur.';
                    contenuInput.parentNode.appendChild(error);
                }
            });

            imageUploadLabel.addEventListener('click', function () {
                console.log('Icône cliquée, déclenchement de l\'input file...');
                imageFileInput.click();
            });

            imageFileInput.addEventListener('change', function () {
                console.log('Fichier sélectionné :', this.files);
                if (this.files.length > 0) {
                    imageFileName.textContent = this.files[0].name;
                } else {
                    imageFileName.textContent = '';
                }
            });

            contenuInput.addEventListener('input', function () {
                updateWordCounter();

                const contenuValue = contenuInput.value.trim();
                const wordCountValue = countWords(contenuValue);
                if (contenuValue.length >= 10 && /\S/.test(contenuValue) && wordCountValue <= 100) {
                    contenuInput.classList.remove('error');
                }
            });

            form.addEventListener('submit', function (e) {
                e.preventDefault();

                let hasError = false;

                const existingErrors = form.querySelectorAll('.form-error');
                existingErrors.forEach(error => error.remove());

                if (!titreInput.value.trim()) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le champ Objet est requis.';
                    titreInput.parentNode.appendChild(error);
                    titreInput.classList.add('error');
                } else if (titreInput.value.length < 5) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le titre doit contenir au moins 5 caractères.';
                    titreInput.parentNode.appendChild(error);
                    titreInput.classList.add('error');
                } else if (titreInput.value.length > 50) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le titre ne peut pas dépasser 50 caractères.';
                    titreInput.parentNode.appendChild(error);
                    titreInput.classList.add('error');
                } else {
                    titreInput.classList.remove('error');
                }

                if (!categoryInput.value) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Veuillez sélectionner une catégorie.';
                    categoryInput.parentNode.appendChild(error);
                    categoryInput.classList.add('error');
                } else {
                    categoryInput.classList.remove('error');
                }

                const wordCountValue = countWords(contenuInput.value);
                if (!contenuInput.value.trim()) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le champ Votre réclamation est requis.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                } else if (contenuInput.value.length < 10) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le contenu doit contenir au moins 10 caractères.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                } else if (wordCountValue > 100) {
                    hasError = true;
                    const error = document.createElement('div');
                    error.className = 'form-error';
                    error.textContent = 'Le contenu ne peut pas dépasser 100 mots.';
                    contenuInput.parentNode.appendChild(error);
                    contenuInput.classList.add('error');
                } else {
                    contenuInput.classList.remove('error');
                }

                if (hasError) {
                    return;
                }

                submitButton.disabled = true;
                submitButton.textContent = 'Envoi en cours...';
                progressContainer.style.display = 'block';
                progressFillSubmission.style.width = '100%';

                const keywords = extractKeywords(contenuInput.value);
                const formData = new FormData(form);
                formData.append('keywords', keywords.join(','));

                fetch(form.action, {
                    method: form.method,
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.message || 'Erreur lors de l\'envoi de la réclamation.');
                    }

                    const trackingNumber = data.trackingNumber;
                    successMessage.innerHTML = `Réclamation envoyée avec succès ! `;
                    successMessage.style.display = 'block';
                    successMessage.classList.add('show');

                    form.reset();
                    imageFileName.textContent = '';
                    updateWordCounter();
                    categoryInput.selectedIndex = 0;

                    submitButton.disabled = false;
                    submitButton.textContent = 'Envoyer';
                    progressContainer.style.display = 'none';
                    progressFillSubmission.style.width = '0';

                    // Fetch and display recent reclamations
                    fetchRecentReclamations();

                    setTimeout(() => {
                        successMessage.classList.remove('show');
                        setTimeout(() => {
                            successMessage.style.display = 'none';
                        }, 300);
                    }, 5000);
                })
                .catch(error => {
                    console.error('Erreur lors de la soumission :', error);
                    errorMessage.textContent = error.message || 'Une erreur est survenue lors de l\'envoi de la réclamation.';
                    errorMessage.style.display = 'block';
                    errorMessage.classList.add('show');
                    submitButton.disabled = false;
                    submitButton.textContent = 'Envoyer';
                    progressContainer.style.display = 'none';
                    progressFillSubmission.style.width = '0';

                    setTimeout(() => {
                        errorMessage.classList.remove('show');
                        setTimeout(() => {
                            errorMessage.style.display = 'none';
                        }, 300);
                    }, 5000);
                });
            });

            updateWordCounter();

            // Fetch recent reclamations on page load
            fetchRecentReclamations();
        });
    </script>
{% endblock %}